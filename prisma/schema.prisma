generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model city {
  id_city              Int                    @id @default(autoincrement())
  name                 String                 @db.VarChar(45)
  country_id           Int
  country              country                @relation(fields: [country_id], references: [id_country], onDelete: NoAction, onUpdate: NoAction, map: "fk_city_country")
  distrit              distrit[]
  reservation_has_city reservation_has_city[]
}

model client {
  id          Int           @id @default(autoincrement())
  fullName    String        @db.VarChar(255)
  country     String        @db.VarChar(255)
  email       String        @unique @db.VarChar(255)
  phone       String        @db.VarChar(30)
  subregion   String        @db.VarChar(150)
  createdAt   DateTime?     @default(now()) @db.Timestamp(6)
  updatedAt   DateTime?     @default(now()) @db.Timestamp(6)
  reservation reservation[]

  @@index([email], map: "idx_email")
  @@index([fullName], map: "idx_full_name")
}

model country {
  id_country Int    @id @default(autoincrement())
  name       String @db.VarChar(45)
  code       String @unique @db.VarChar(10)
  city       city[]
}

model distrit {
  id_distrit Int     @id @default(autoincrement())
  name       String  @db.VarChar(45)
  city_id    Int
  city       city    @relation(fields: [city_id], references: [id_city], onDelete: NoAction, onUpdate: NoAction, map: "fk_distrit_city")
  hotel      hotel[]
}

model reservation {
  id                        Int                        @id @default(autoincrement())
  number_of_people          Int
  start_date                DateTime                   @db.Date
  end_date                  DateTime                   @db.Date
  traveler_style            reservation_traveler_style
  status                    reservation_status         @default(PENDING)
  order_type                reservation_order_type     @default(DIRECT)
  additional_specifications String?
  code                      String                     @db.VarChar(50)
  clientId                  Int
  createdAt                 DateTime?                  @default(now()) @db.Timestamp(6)
  updatedAt                 DateTime?                  @default(now()) @db.Timestamp(6)
  client                    client                     @relation(fields: [clientId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_client")
  reservation_has_city      reservation_has_city[]
  version_quotation         version_quotation?
}

model reservation_has_city {
  city_id        Int
  reservation_id Int
  city           city        @relation(fields: [city_id], references: [id_city], onDelete: Cascade, onUpdate: NoAction)
  reservation    reservation @relation(fields: [reservation_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([city_id, reservation_id])
}

model role {
  id_role Int       @id @default(autoincrement())
  name    role_type @unique
  user    user[]
}

model user {
  id_user           Int                 @id @default(autoincrement())
  fullname          String              @db.VarChar(45)
  email             String              @db.VarChar(45)
  password          String              @db.VarChar(200)
  id_role           Int
  role              role                @relation(fields: [id_role], references: [id_role], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_role")
  version_quotation version_quotation[]
}

model hotel {
  id_hotel   Int          @id @default(autoincrement())
  name       String       @db.VarChar(45)
  category   String       @db.VarChar(50)
  address    String       @db.VarChar(45)
  distrit_id Int
  distrit    distrit      @relation(fields: [distrit_id], references: [id_distrit], onDelete: NoAction, onUpdate: NoAction, map: "fk_hotel_distrit")
  hotel_room hotel_room[]
}

model hotel_room {
  id_hotel_room        Int                    @id @default(autoincrement())
  room_type            String                 @db.VarChar(100)
  price_usd            Decimal?               @db.Decimal(10, 2)
  price_pen            Decimal?               @db.Decimal(10, 2)
  capacity             Int
  hotel_id             Int
  hotel                hotel                  @relation(fields: [hotel_id], references: [id_hotel], onDelete: NoAction, onUpdate: NoAction, map: "fk_hotel_room_hotel")
  hotel_room_quotation hotel_room_quotation[]
}

model quotation {
  id_quotation      Int                 @id @default(autoincrement())
  created_at        DateTime            @default(now()) @db.Timestamp(6)
  updated_at        DateTime            @default(now()) @db.Timestamp(6)
  version_quotation version_quotation[]
}

model version_quotation {
  indirect_cost_margin Decimal?               @db.Decimal(5, 2)
  profit_margin        Decimal?               @db.Decimal(5, 2)
  total_cost           Decimal?               @db.Decimal(10, 2)
  final_price          Decimal?               @db.Decimal(10, 2)
  status               quotation_status       @default(DRAFT)
  official             Boolean                @default(false)
  created_at           DateTime               @default(now()) @db.Timestamp(6)
  updated_at           DateTime               @default(now()) @db.Timestamp(6)
  version_number       Int
  quotation_id         Int
  reservation_id       Int?                   @unique
  user_id              Int
  hotel_room_quotation hotel_room_quotation[]
  quotation            quotation              @relation(fields: [quotation_id], references: [id_quotation], onDelete: Cascade, onUpdate: NoAction, map: "fk_version_quotation_quotation")
  reservation          reservation?           @relation(fields: [reservation_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_version_quotation_reservation")
  user                 user                   @relation(fields: [user_id], references: [id_user], onDelete: Cascade, onUpdate: NoAction, map: "fk_version_quotation_user")

  @@id([version_number, quotation_id])
  @@index([quotation_id], map: "idx_quotation_id")
  @@index([version_number], map: "idx_version_number")
}

model hotel_room_quotation {
  id_hotel_room_quotation Int               @id @default(autoincrement())
  number_of_people        Int
  day                     Int
  hotel_room_id           Int
  version_number          Int
  quotation_id            Int
  hotel_room              hotel_room        @relation(fields: [hotel_room_id], references: [id_hotel_room], onDelete: Cascade, onUpdate: NoAction, map: "fk_hotel_room_quotation_hotel_room")
  version_quotation       version_quotation @relation(fields: [version_number, quotation_id], references: [version_number, quotation_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_hotel_room_quotation_version_quotation")

  @@unique([hotel_room_id, day, quotation_id, version_number], map: "unique_hotel_per_day")
}

enum reservation_order_type {
  DIRECT
  INDIRECT
}

enum reservation_status {
  ACTIVE
  PENDING
  COMPLETED
  CANCELATED
}

enum reservation_traveler_style {
  STANDARD
  COMFORT
  LUXUS
}

enum role_type {
  MANAGER_ROLE
  EMPLOYEE_ROLE
}

enum quotation_status {
  DRAFT
  PENDING
  ACCEPTED
  REJECTED
}
